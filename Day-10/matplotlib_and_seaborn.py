# -*- coding: utf-8 -*-
"""matplotlib_and_seaborn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15HNUgl-KLL0EVHBTwFAOYS9WihRkl7gg
"""

pip install matplotlib

import matplotlib.pyplot as plt
months=['Jan','Feb','Mar','Apr','May']
sales=[300,450,150,400,600]
plt.plot(months, sales, color='blue', marker='o', linestyle='--')
plt.title("Monthly Sales Trend")
plt.xlabel("Months")
plt.ylabel("Sales (in $)")
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt
days=['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
temperature=[30, 32, 31, 29, 28, 27, 26]
plt.plot(days, temperature, color='red', marker='s', linestyle='-.')
plt.title("Weekly Temperature Variation")
plt.xlabel("Days of the Week")
plt.ylabel("Temperature (°C)")
plt.grid(True)
plt.show()

products=['TV','Laptop','Mobile','tablet']
revenue=[40000,60000,80000,30000]
plt.bar(products, revenue, color='black')
plt.title("Product Revenue Comparison")
plt.xlabel("Products")
plt.ylabel("Revenue ($)")
plt.show()

import matplotlib.pyplot as plt
import numpy as np
age = np.array([22, 25, 30, 35, 40, 45, 50])
salary = np.array([25000, 28000, 35000, 40000, 48000, 50000, 52000])
plt.scatter(age, salary, color='green')
plt.title('Age vs Salary Relationship')
plt.xlabel('Age')
plt.ylabel('Salary ($)')
plt.show()

import matplotlib.pyplot as plt
import numpy as np
brands=['Apple','SAmnsung','OnePlus','Others']
market_share=[40,30,20,10]
colors=['gold','lightblue','lightgreen','pink']
plt.pie(market_share,labels=brands,colors=colors,autopct='%1.1f%%',startangle=90)
plt.title('Mobile market share')
plt.show()

import matplotlib.pyplot as plt
platforms=['Instagram', 'YouTube', 'Twitter', 'Facebook']
usage=[35, 40, 15, 10]
colors=['lightpink','red','white','lightblue']
plt.pie(usage, labels=platforms, colors=colors, autopct='%1.1f%%', startangle=140)
plt.title('Social Media Platform Usage')
plt.show()

ages=np.random.randint(18,60,100)
plt.hist(ages,bins=10,color='blue',edgecolor='black')
plt.title("Age Distribution Of Employees")
plt.xlabel("Age Groups")
plt.ylabel("Count")
plt.show()

x=[1,2,3,4,5]
y1=[10,20,25,30,35]
y2=[5,15,20,25,30]
plt.figure(figsize=(10,5))
plt.subplot(1,2,1)
plt.plot(x,y1,'r--')
plt.title("Line Plot")
plt.subplot(1,2,2)
plt.bar(x,y2,color='violet')
plt.title("Bar Plot")
plt.tight_layout()
plt.show()

plt.style.use('ggplot')
x=[1,2,3,4,5]
sales=[10,14,20,28,35]
profit=[1,3,5,7,9]
plt.plot(x,sales,marker='o',label='Sales')
plt.plot(x,profit,marker='s',label='Profit')
plt.title("Sales vs Profit")
plt.xlabel("Quater")
plt.ylabel("Amount")
plt.grid(True)
plt.savefig('sales_profit.png')
plt.legend()
plt.show()

import pandas as pd
import numpy as np
df = pd.read_csv('/content/data.csv')
print(" Dataset Overview")
print("-" * 40)
print("Number of rows:", df.shape[0])
print("Number of columns:", df.shape[1])
print("\nData Types:")
print(df.dtypes)

print("\nMissing Values per Column:")
print(df.isnull().sum())
duplicates = df.duplicated().sum()
print("\nNumber of duplicate rows before removal:", duplicates)

df = df.drop_duplicates()
print("Number of rows after removing duplicates:", df.shape[0])
print("➡ Rows removed:", duplicates)
if 'Date' in df.columns:
    df['Date'] = pd.to_datetime(df['Date'], errors='coerce')  # invalid values → NaT
    df = df.sort_values('Date')
    invalid_dates = df['Date'].isna().sum()
    print("\n Invalid/Missing Dates:", invalid_dates)
else:
    print("\n No 'Date' column found in dataset.")
numeric_cols = df.select_dtypes(include=[np.number]).columns
df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].mean())

print("\n Missing values in numeric columns handled using MEAN imputation.")
print("Reason: Mean maintains the overall data trend for continuous variables.\n")
print("Remaining Missing Values After Cleaning:")
print(df.isnull().sum())
print("\n Data cleaning complete!")

import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv('data.csv')
df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
df = df.sort_values('Date')
plt.figure(figsize=(10,6))
plt.plot(df['Date'], df['Calories'], color='blue', marker='o', linestyle='--')
plt.title('Calories Over Time')
plt.xlabel('Date')
plt.ylabel('Calories')
plt.grid(True)
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig('line_calories_over_time.png')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import pearsonr
df = pd.read_csv('data.csv')
plt.figure(figsize=(8,6))
plt.scatter(df['Duration'], df['Calories'], color='purple', alpha=0.6)
corr_coef, _ = pearsonr(df['Duration'], df['Calories'])
print(f"Pearson correlation coefficient between Duration and Calories: {corr_coef:.2f}")
m, b = np.polyfit(df['Duration'], df['Calories'], 1)  # slope & intercept
plt.plot(df['Duration'], m*df['Duration'] + b, color='red', linestyle='--', label='Trend line')
plt.xlabel('Duration')
plt.ylabel('Calories')
plt.title('Duration vs Calories Scatter Plot')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.savefig('scatter_duration_vs_calories.png')
plt.show()

bins = [0, 120, 140, 160, df['Maxpulse'].max()]
labels = ['<=120', '121-140', '141-160', '>160']
df['Maxpulse_range'] = pd.cut(df['Maxpulse'], bins=bins, labels=labels, include_lowest=True)
range_counts = df['Maxpulse_range'].value_counts()
plt.figure(figsize=(7,7))
plt.pie(range_counts, labels=range_counts.index, autopct='%1.1f%%', startangle=90, colors=['gold','lightblue','lightgreen','pink'])
plt.title('Maxpulse Range Distribution')
plt.savefig('pie_maxpulse_ranges.png')
plt.show()

plt.figure(figsize=(8,6))
plt.hist(df['Calories'], bins=15, color='orange', edgecolor='black')
plt.title('Histogram of Calories')
plt.xlabel('Calories')
plt.ylabel('Frequency')
plt.grid(axis='y')
cal_mean = df['Calories'].mean()
cal_median = df['Calories'].median()
print(f"Mean: {cal_mean:.2f}, Median: {cal_median:.2f}")
if cal_mean > cal_median:
    print("➡ Distribution is right-skewed (positively skewed).")
elif cal_mean < cal_median:
    print("➡ Distribution is left-skewed (negatively skewed).")
else:
    print("➡ Distribution is approximately symmetric.")
plt.tight_layout()
plt.savefig('hist_calories.png')
plt.show()

plt.figure(figsize=(14,5))
plt.subplot(1,2,1)
df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
df_sorted = df.sort_values('Date')
plt.plot(df_sorted['Date'], df_sorted['Pulse'], color='blue', marker='o', linestyle='--')
plt.title('Pulse Over Date')
plt.xlabel('Date')
plt.ylabel('Pulse')
plt.xticks(rotation=45)
plt.grid(True)
plt.subplot(1,2,2)
plt.scatter(df['Duration'], df['Maxpulse'], color='green', alpha=0.6)
plt.title('Duration vs Maxpulse')
plt.xlabel('Duration')
plt.ylabel('Maxpulse')
plt.grid(True)
plt.tight_layout()
plt.savefig('subplots_pulse_duration_maxpulse.png')
plt.show()

Task

 1. Basic Data Understanding
What does the dataset look like?
What are the column names, data types, and basic statistics?
Are there missing values or anomalies?
(No plot required — just inspection using Pandas.)

 2. Trend Analysis
How does a numerical variable (e.g., Sales) change over time or index?
Are there visible upward or downward trends?
Are there any noticeable spikes, dips, or seasonality?
lineplot



 3. Category Comparison
Which category (e.g., Region, Product, Department) contributes most to the total value?
Which categories have lower contributions?
How big is the gap between categories?
barplot

 4. Value Distribution
How are values in a numerical column distributed?
Are they concentrated around certain ranges or spread out evenly?
Are there extreme values?
histplot

 5. Relationship Between Variables
How does one numerical variable relate to another (e.g., Sales vs Profit)?
Is there any visible correlation?
Are there outliers?
scatterplot



 6. Outliers & Spread
How spread out are values in a numerical column?
Are there any outliers?
How does this spread differ across categories?
boxplot

 7. Proportions
How is the dataset divided among different categories?
Which category has the largest share?
Is the distribution balanced or skewed?
pieplot

 8. Multiple Visuals in One View
How do multiple insights look side by side?
Can we spot patterns when trend, distribution, and relationships are combined visually?
Which plot gives the clearest story?
subplots
 9. Final Task Submission
Your final notebook/script must include:
All questions answered with appropriate Matplotlib  plots.
Proper customization (titles, labels, legends, grids).
A short written note (markdown ) under each plot describing what the plot reveals.
All code should be your own — no Seaborn or external visualization librarie

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# 1️⃣ Basic Data Understanding
df = pd.read_csv('tip(in).csv')
print("Dataset Overview")
print("-"*40)
print("Shape:", df.shape)
print("\nColumn Names & Data Types:\n", df.dtypes)
print("\nBasic Statistics:\n", df.describe(include='all'))
print("\nMissing Values:\n", df.isnull().sum())
print("\nDuplicate Rows:", df.duplicated().sum())
# 2️⃣ Trend Analysis (Line Plot)
if 'Date' in df.columns:
    df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
    df_sorted = df.sort_values('Date')
    x_vals = df_sorted['Date']
else:
    x_vals = df.index

y_vals = df['Sales'] if 'Sales' in df.columns else df.iloc[:,0]
plt.figure(figsize=(10,5))
plt.plot(x_vals, y_vals, marker='o', linestyle='-', color='blue', label='Sales')
plt.title('Trend of Sales Over Time')
plt.xlabel('Date / Index')
plt.ylabel('Sales')
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()
# 3️⃣ Category Comparison (Bar Plot)
cat_col = 'Region' if 'Region' in df.columns else df.columns[1]
num_col = 'Sales' if 'Sales' in df.columns else df.columns[0]
category_totals = df.groupby(cat_col)[num_col].sum().sort_values(ascending=False)
plt.figure(figsize=(8,5))
plt.bar(category_totals.index, category_totals.values, color='orange')
plt.title(f'Total {num_col} by {cat_col}')
plt.xlabel(cat_col)
plt.ylabel(f'Total {num_col}')
plt.xticks(rotation=45)
plt.grid(axis='y')
plt.tight_layout()
plt.show()
# 4️⃣ Value Distribution (Histogram)
plt.figure(figsize=(8,5))
plt.hist(df[num_col].dropna(), bins=15, color='green', edgecolor='black')
plt.title(f'Distribution of {num_col}')
plt.xlabel(num_col)
plt.ylabel('Frequency')
plt.grid(axis='y')
plt.tight_layout()
plt.show()
# 5️⃣ Relationship Between Variables (Scatter Plot)
num_col2 = 'Profit' if 'Profit' in df.columns else df.columns[1]
plt.figure(figsize=(8,5))
plt.scatter(df[num_col], df[num_col2], color='purple', alpha=0.7)
plt.title(f'{num_col} vs {num_col2}')
plt.xlabel(num_col)
plt.ylabel(num_col2)
plt.grid(True)
plt.tight_layout()
plt.show()
# 6️⃣ Outliers & Spread (Box Plot)
plt.figure(figsize=(6,5))
plt.boxplot(df[num_col].dropna(), patch_artist=True, boxprops=dict(facecolor='skyblue'))
plt.title(f'Box Plot of {num_col}')
plt.ylabel(num_col)
plt.grid(axis='y')
plt.tight_layout()
plt.show()
# 7️⃣ Proportions (Pie Chart)
cat_counts = df[cat_col].value_counts()
plt.figure(figsize=(6,6))
plt.pie(cat_counts, labels=cat_counts.index, autopct='%1.1f%%', startangle=140, colors=plt.cm.Pastel1.colors)
plt.title(f'Proportion of {cat_col}')
plt.tight_layout()
plt.show()
# 8️⃣ Multiple Visuals (Subplots)
fig, axes = plt.subplots(1, 2, figsize=(14,5))
axes[0].plot(x_vals, y_vals, marker='o', linestyle='-', color='blue')
axes[0].set_title('Trend of Sales')
axes[0].set_xlabel('Date / Index')
axes[0].set_ylabel('Sales')
axes[0].grid(True)
axes[1].scatter(df[num_col], df[num_col2], color='purple', alpha=0.7)
axes[1].set_title(f'{num_col} vs {num_col2}')
axes[1].set_xlabel(num_col)
axes[1].set_ylabel(num_col2)
axes[1].grid(True)
plt.tight_layout()
plt.show()

import seaborn as sns
import pandas as pd
sns.set_theme(style='whitegrid')
tips=sns.load_dataset('tips')
iris=sns.load_dataset('iris')
print('Datasets loaded:tips(rows:{}),iris(rows:{})'.format(len(tips),len(iris)))
tips.head()

sns.histplot(tips['total_bill'], kde=False)
plt.title('Histogram - Distribution of Total Bill')
plt.show()

# KDE Plot
sns.kdeplot(tips['total_bill'])
plt.title('KDE Plot - Smooth Distribution of Total Bill')
plt.show()

# Displot (Histogram + KDE)
sns.displot(tips['total_bill'], kde=True)
plt.title('Displot - Total Bill Distribution')
plt.show()

# Bar Plot - Average Tip by Gender
sns.barplot(x='sex', y='tip', data=tips)
plt.title('Bar Plot - Average Tip by Gender')
plt.show()

# Count Plot - Frequency of Days
sns.countplot(x='day', data=tips)
plt.title('Count Plot - Frequency of Days')
plt.show()

# Box Plot - Total Bill by Day
sns.boxplot(x='day', y='total_bill', data=tips)
plt.title('Box Plot - Total Bill by Day')
plt.show()

# Violin Plot - Distribution + Summary
sns.violinplot(x='day', y='total_bill', data=tips)
plt.title('Violin Plot - Total Bill by Day')
plt.show()

# Scatter Plot - Total Bill vs Tip
sns.scatterplot(x='total_bill', y='tip', data=tips, hue='sex')
plt.title('Scatter Plot - Total Bill vs Tip')
plt.show()

# Line Plot - Tip vs Party Size (useful for trend-like visuals)
sns.lineplot(x='size', y='tip', data=tips)
plt.title('Line Plot - Tip vs Party Size')
plt.show()

# Relplot with Facets
sns.relplot(x='total_bill', y='tip', hue='sex', col='day', data=tips)
plt.suptitle('Relplot - Tip vs Total Bill by Day & Gender', y=1.02)
plt.show()

# Select only numeric columns
iris_num = iris.select_dtypes(include=['float', 'int'])

# Compute correlation
corr = iris_num.corr()

# Plot the heatmap
sns.heatmap(corr, annot=True,cmap='coolwarm')
plt.title("Heatmap - Correlation of Iris Features")
plt.show()

iris_num = iris.select_dtypes(include=['float', 'int'])
corr = iris_num.corr()
sns.clustermap(corr, cmap='coolwarm', annot=True)
plt.suptitle('Clustermap - Grouped Correlations (Numeric Only)', y=1.02)
plt.show()

# STEP 1 — LOAD AND CLEAN CUSTOMER SUPPORT DATA
import pandas as pd
import numpy as np
df = pd.read_csv('/content/Customer_support_data.csv')
print("Data Loaded — Rows:", df.shape[0], " | Columns:", df.shape[1])
df.columns = df.columns.str.strip()
df.drop_duplicates(inplace=True)
print("\nMissing Values (top 15):")
print(df.isnull().sum().head(15))
num_cols = ['Item_price', 'connected_handling_time', 'CSAT Score']
for col in num_cols:
    df[col] = pd.to_numeric(df[col], errors='coerce')
date_cols = ['order_date_time', 'Issue_reported at', 'issue_responded', 'Survey_response_Date']
for col in date_cols:
    df[col] = pd.to_datetime(df[col], errors='coerce', dayfirst=True)

print("\n Column Data Types:")
print(df.dtypes)
print("\n Descriptive Statistics (numeric):")
print(df[num_cols].describe())
cat_cols = ['channel_name','category','Sub-category','Agent Shift','Tenure Bucket']
print("\n Unique Categories:")
for col in cat_cols:
    print(f"{col:20s} → {df[col].nunique()} unique values")
df.to_csv('/content/customer_support_data_cleaned.csv', index=False)
print("\nCleaned data saved as 'customer_support_data_cleaned.csv'")

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(8,5))
sns.histplot(df['Item_price'], bins=20, kde=True, color='skyblue')
plt.title('Distribution of Item Price')
plt.xlabel('Item Price')
plt.ylabel('Frequency')
plt.savefig('hist_item_price.png')
plt.show()

plt.figure(figsize=(6,5))
sns.boxplot(x=df['CSAT Score'], color='orange')
plt.title('CSAT Score Variation')
plt.xlabel('CSAT Score')
plt.savefig('boxplot_csat_score.png')
plt.show()

fig, axes = plt.subplots(2, 1, figsize=(8,7))
sns.histplot(df['connected_handling_time'], bins=20, kde=True, ax=axes[0], color='lightgreen')
sns.boxplot(x=df['connected_handling_time'], ax=axes[1], color='lightblue')
axes[0].set_title('Distribution of Connected Handling Time')
axes[1].set_title('Boxplot of Connected Handling Time')
plt.tight_layout()
plt.savefig('handling_time_distribution.png')
plt.show()

csat_counts = df['CSAT Score'].value_counts()
plt.figure(figsize=(6,6))
plt.pie(csat_counts, labels=csat_counts.index, autopct='%1.1f%%', startangle=90, colors=sns.color_palette('pastel'))
plt.title('CSAT Score Distribution')
plt.savefig('pie_csat_score.png')
plt.show()

bins = [0, 100, 500, 1000, 5000, 10000]
labels = ['0-100', '100-500', '500-1k', '1k-5k', '5k+']
df['Price_Range'] = pd.cut(df['Item_price'], bins=bins, labels=labels)
price_range_counts = df['Price_Range'].value_counts().sort_index()

plt.figure(figsize=(8,5))
sns.barplot(x=price_range_counts.index, y=price_range_counts.values, color='purple')
plt.title('Most Common Item Price Ranges')
plt.xlabel('Price Range')
plt.ylabel('Count')
plt.savefig('bar_price_range.png')
plt.show()

# 6. Tickets by channel_name
plt.figure(figsize=(6,4))
sns.countplot(x='channel_name', data=df)
plt.title("Tickets by Channel Name")
plt.savefig("bar_channel_name.png")
plt.show()

# 7. Category with highest tickets
plt.figure(figsize=(8,5))
df['category'].value_counts().plot(kind='bar')
plt.title("Tickets per Category")
plt.savefig("bar_category.png")
plt.show()

# 8. Agent Shift Pie chart
plt.figure(figsize=(6,6))
df['Agent Shift'].value_counts().plot.pie(autopct='%1.1f%%')
plt.title("Tickets by Agent Shift")
plt.savefig("pie_agent_shift.png")
plt.show()

# 9. Top 10 Sub-category
plt.figure(figsize=(8,5))
df['Sub-category'].value_counts().head(10).sort_values().plot(kind='barh')
plt.title("Top 10 Sub-categories")
plt.savefig("barh_top10_subcategory.png")
plt.show()

plt.figure(figsize=(6,4))
sns.countplot(x='Tenure Bucket', data=df)
plt.title("Tickets by Tenure Bucket")
plt.savefig("bar_tenure_bucket.png")
plt.show()

# 11. Scatter: Item_price vs CSAT
sns.scatterplot(x='Item_price', y='CSAT Score', data=df)
plt.title("Item Price vs CSAT Score")
plt.savefig("scatter_itemprice_csat.png")
plt.show()

# 12. Scatter + Trend: connected_handling_time vs CSAT
sns.lmplot(x='connected_handling_time', y='CSAT Score', data=df, aspect=1.5)
plt.title("Handling Time vs CSAT (with Trend Line)")
plt.savefig("trend_handlingtime_csat.png")
plt.show()

# 13. Hexbin: Item_price vs connected_handling_time
plt.figure(figsize=(7,6))
plt.hexbin(df['Item_price'], df['connected_handling_time'], gridsize=25, cmap='viridis')
plt.colorbar(label='count')
plt.xlabel("Item Price")
plt.ylabel("Handling Time")
plt.title("Hexbin Plot: Item Price vs Handling Time")
plt.savefig("hexbin_itemprice_handling.png")
plt.show()

plt.figure(figsize=(8,5))
avg_csat = df.groupby('channel_name')['CSAT Score'].mean().sort_values(ascending=False)
sns.barplot(x=avg_csat.index, y=avg_csat.values, palette='cool')
plt.title('Average CSAT Score per Channel')
plt.xlabel('Channel Name')
plt.ylabel('Average CSAT Score')
plt.savefig('bar_avg_csat_per_channel.png')
plt.show()

plt.figure(figsize=(10,6))
sns.boxplot(x='category', y='Item_price', data=df, palette='Set2')
plt.title('Item Price Distribution per Category')
plt.xlabel('Category')
plt.ylabel('Item Price')
plt.xticks(rotation=45)
plt.savefig('boxplot_itemprice_per_category.png')
plt.show()

plt.figure(figsize=(8,5))
sns.boxplot(x='Agent Shift', y='connected_handling_time', data=df, palette='pastel')
plt.title('Connected Handling Time by Agent Shift')
plt.xlabel('Agent Shift')
plt.ylabel('Handling Time')
plt.savefig('boxplot_handling_time_agentshift.png')
plt.show()

top5 = df['Product_category'].value_counts().head(5).index
subset = df[df['Product_category'].isin(top5)]
summary = subset.groupby('Product_category')['Item_price'].agg(['mean','std']).reset_index()

plt.figure(figsize=(8,5))
plt.errorbar(summary['Product_category'], summary['mean'], yerr=summary['std'], fmt='o', ecolor='black', capsize=5, color='green')
plt.title('Mean and Variability of Item Price (Top 5 Product Categories)')
plt.xlabel('Product Category')
plt.ylabel('Item Price')
plt.savefig('errorbar_itemprice_top5_productcat.png')
plt.show()

plt.figure(figsize=(7,5))
avg_csat_tenure = df.groupby('Tenure Bucket')['CSAT Score'].mean().sort_index()
sns.barplot(x=avg_csat_tenure.index, y=avg_csat_tenure.values, palette='Blues')
plt.title('Average CSAT Score Across Tenure Buckets')
plt.xlabel('Tenure Bucket')
plt.ylabel('Average CSAT Score')
plt.savefig('bar_csat_tenure_bucket.png')
plt.show()

# Count of tickets by channel_name and category
ticket_counts = df.groupby(['channel_name', 'category']).size().unstack(fill_value=0)

# Plot stacked bar chart
ticket_counts.plot(kind='bar', stacked=True, figsize=(10,6), colormap='tab20')
plt.title('Number of Tickets by Channel and Category')
plt.xlabel('Channel Name')
plt.ylabel('Ticket Count')
plt.legend(title='Category', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.savefig('stackedbar_channel_vs_category.png')
plt.show()

plt.figure(figsize=(10,6))
sns.countplot(x='category', hue='Agent Shift', data=df, palette='viridis')
plt.title('Agent Shift Distribution Across Categories')
plt.xlabel('Category')
plt.ylabel('Ticket Count')
plt.xticks(rotation=45)
plt.legend(title='Agent Shift')
plt.tight_layout()
plt.savefig('groupedbar_shift_vs_category.png')
plt.show()

daily_tickets = df.groupby(df['order_date_time'].dt.date).size()

plt.figure(figsize=(10,5))
plt.plot(daily_tickets.index, daily_tickets.values, marker='o', linestyle='--', color='teal')
plt.title('Tickets Created per Day')
plt.xlabel('Date')
plt.ylabel('Ticket Count')
plt.grid(True)
plt.xticks(rotation=45)
plt.savefig('line_tickets_per_day.png')
plt.show()

daily_csat = df.groupby(df['Survey_response_Date'].dt.date)['CSAT Score'].mean()

plt.figure(figsize=(10,5))
plt.plot(daily_csat.index, daily_csat.values, marker='o', color='orange')
plt.title('Daily Trend of Average CSAT Score')
plt.xlabel('Date')
plt.ylabel('Average CSAT Score')
plt.grid(True)
plt.xticks(rotation=45)
plt.savefig('line_avg_csat_per_day.png')
plt.show()

weekly_issues = df.groupby(df['Issue_reported at'].dt.isocalendar().week).size()

plt.figure(figsize=(8,5))
sns.barplot(x=weekly_issues.index, y=weekly_issues.values, color='skyblue')
plt.title('Issues Reported per Week')
plt.xlabel('Week Number')
plt.ylabel('Number of Issues')
plt.savefig('bar_issues_per_week.png')
plt.show()

monthly_tickets = df.groupby(df['order_date_time'].dt.to_period('M')).size()

plt.figure(figsize=(9,5))
monthly_tickets.plot(kind='line', marker='o', color='purple')
plt.title('Monthly Ticket Volume')
plt.xlabel('Month')
plt.ylabel('Ticket Count')
plt.grid(True)
plt.savefig('line_monthly_ticket_volume.png')
plt.show()

volume_by_channel = df.groupby([df['order_date_time'].dt.date, 'channel_name']).size().unstack(fill_value=0)

volume_by_channel.plot(figsize=(10,6), marker='o')
plt.title('Ticket Volume by Channel Over Time')
plt.xlabel('Date')
plt.ylabel('Ticket Count')
plt.legend(title='Channel Name')
plt.grid(True)
plt.tight_layout()
plt.savefig('multiline_channel_over_time.png')
plt.show()

df['response_time'] = (df['issue_responded'] - df['Issue_reported at']).dt.total_seconds() / 60
response_trend = df.groupby(df['Issue_reported at'].dt.date)['response_time'].mean()

plt.figure(figsize=(10,5))
plt.plot(response_trend.index, response_trend.values, color='red', marker='o')
plt.title('Average Response Time Trend (Minutes)')
plt.xlabel('Date')
plt.ylabel('Response Time (min)')
plt.grid(True)
plt.savefig('line_response_time_trend.png')
plt.show()

#27. “Show the volume of resolved issues over time.” → Line plot
resolved_trend = df.groupby(df['issue_responded'].dt.date).size()

plt.figure(figsize=(10,5))
plt.plot(resolved_trend.index, resolved_trend.values, marker='o', color='green')
plt.title('Resolved Issues Over Time')
plt.xlabel('Date')
plt.ylabel('Resolved Issues Count')
plt.grid(True)
plt.savefig('line_resolved_issues.png')
plt.show()

#28. “What is the peak hour or day for incoming tickets?” → Bar chart (hourly/daily distribution)
df['hour'] = df['Issue_reported at'].dt.hour
hourly_tickets = df.groupby('hour').size()

plt.figure(figsize=(9,5))
sns.barplot(x=hourly_tickets.index, y=hourly_tickets.values, color='coral')
plt.title('Peak Hours for Incoming Tickets')
plt.xlabel('Hour of Day')
plt.ylabel('Ticket Count')
plt.savefig('bar_peak_hour_tickets.png')
plt.show()

